{"version":3,"sources":["redux/pb-actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/pb-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","filterContact","ContactForm","state","onInputChange","evt","setState","target","value","handleSubmit","preventDefault","props","inputId","this","className","onSubmit","htmlFor","type","pattern","title","required","onChange","Component","connect","dispatch","actions","contacts","items","normalizeFilter","filter","toLowerCase","item","includes","onDeleteContact","map","contact","onClick","App","createReducer","action","combineReducers","middleware","storage","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.33e69e30.chunk.js","sourcesContent":["import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const addContact = createAction('addContact', (name, number) => ({\r\n    payload: {id: shortid.generate(), name, number}\r\n}));\r\nexport const deleteContact = createAction('deleteContact');\r\nexport const filterContact = createAction('fitlerContact');\r\n\r\n\r\n\r\n// export const addContact = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {id: shortid.generate(), name, number},\r\n// });\r\n\r\n// export const deleteContact = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n// });\r\n\r\n// export const filterContact = value => ({\r\n//     type: types.FILTER,\r\n//     payload: value,\r\n// });\r\n","import './ContactForm.css';\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport shortid from \"shortid\";\r\nimport * as actions from '../../redux/pb-actions';\r\n\r\n\r\nclass ContactForm extends Component{\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    onInputChange = evt => {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    };\r\n    \r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const { name, number } = this.state;\r\n       \r\n        this.props.addContact(name, number);\r\n\r\n        this.setState({ name: \"\", number: \"\" });   \r\n    };\r\n    \r\n    render()\r\n    {\r\n        const inputId = shortid.generate();\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <div className=\"Container-form\">\r\n\r\n                    <form className=\"form\" onSubmit={this.handleSubmit}>\r\n                        <label htmlFor={inputId}>\r\n                            Name\r\n                            <br></br>\r\n                            <input\r\n                                className=\"Container-form__input\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                                required\r\n                                value={name}\r\n                                onChange={this.onInputChange}\r\n                                // id={props.inputId}\r\n                            />\r\n                        </label>\r\n                        <br></br>\r\n                        <label>\r\n                            Number\r\n                            <br></br>\r\n                            <input\r\n                                className=\"Container-form__input\"\r\n                                type=\"tel\"\r\n                                name=\"number\"\r\n                                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                                title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                                required\r\n                                value={number}\r\n                                onChange={this.onInputChange}\r\n                                // id={props.inputId}\r\n                            />\r\n                        </label>\r\n                        <br></br>\r\n                      <button type=\"submit\" className=\"Container-form__btn\">Add Contact</button>  \r\n                    </form>\r\n                 \r\n                </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addContact: (name, number) => dispatch(actions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import './ContactList.css';\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from '../../redux/pb-actions';\r\nimport shortid from \"shortid\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact}) => {\r\n\r\n    return (\r\n\r\n        <div className=\"Contact-container\">\r\n            <ul className=\"Contact-container__list\">\r\n                {contacts.map(contact => (\r\n                    <li key={shortid.generate()} className=\"Contact-container__item\">{contact.name}: {contact.number}\r\n                        <button onClick={() => onDeleteContact(contact.id)}>Delete</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    const { items, filter } = state.contacts;\r\n    const normalizeFilter = filter.toLowerCase();\r\n    const visibleContacts = items.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n    return { contacts: visibleContacts }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: id => dispatch(actions.deleteContact(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { connect } from \"react-redux\";\r\nimport * as actions from '../../redux/pb-actions';\r\n\r\n\r\nconst Filter = ({value, onChange}) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Find contact by name</h3>\r\n            <label>\r\n                <input\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                ></input>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: state.contacts.filter\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (evt) => dispatch(actions.filterContact(evt.target.value))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport './App.css';\n\n// Components\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\n\n\nfunction App() {\n  \n// console.log(store.getState().contacts)\n  // componentDidMount() {\n  //   const storageContacts = localStorage.getItem('contacts');\n  //   const parseStorageContacts = JSON.parse(storageContacts);\n  //   if(parseStorageContacts) this.setState({ contacts: parseStorageContacts });\n    \n  // };\n  \n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('state is update!');\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n  //   }\n  // };\n    \n  return (\n    <div className=\"Container\">\n         <h2>Phonebook</h2>\n        <ContactForm />\n        \n        <h2>Contacts</h2>\n        \n        <Filter />\n        \n        <ContactList />\n        \n      </div>\n  ) \n};\n\nexport default App;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './pb-actions';\r\n\r\n\r\nconst contactsState = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' }\r\n];\r\n\r\nconst items = createReducer(contactsState, {\r\n    [actions.addContact]: (state, action) => [action.payload, ...state],\r\n\r\n    [actions.deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.filterContact]: (state, action) => action.payload,\r\n});\r\n\r\n\r\n// const items = (state = contactsState, {type, payload}) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [payload, ...state];\r\n        \r\n//         case types.DELETE:\r\n//             return state.filter(contact => contact.id !== payload);\r\n       \r\n//         default:\r\n//             return state;\r\n//    }\r\n// };\r\n\r\n// const filter = (state = '', {type, payload}) => {\r\n//     switch (type) {\r\n//         case types.FILTER:\r\n//             return payload;\r\n       \r\n//         default:\r\n//             return state;\r\n//    }\r\n// };\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore, persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactReducer from './pb-reducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst persistConfig = {\r\n  key: 'my-contacts',\r\n  storage,\r\n};\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}), logger];\r\n  \r\nconst contactsPersistConfig = {\r\n  key: 'my-contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {store, persistor};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport store from './redux/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}